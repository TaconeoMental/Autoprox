#!/usr/bin/env python3

import argparse

from src.logger import LOGGER, LEVEL_WARN
from src.proxy import Proxy
from src.parser.conf_file import ConfigFile
from src.parser.lexer import Lexer
from src.parser.error_collector import ErrorCollector, CompilerException


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("source", help="Autoprox config file path.")
    group_verbose = argparser.add_mutually_exclusive_group()
    group_verbose.add_argument("-v", type=int, default=5, help="Verbose count.")
    group_verbose.add_argument("-q", "--quiet", action="store_true", help="Quiet output. Just display necessary information.")
    parsed_args = argparser.parse_args()

    if parsed_args.quiet:
        LOGGER.set_level(LEVEL_WARN)
    else:
        LOGGER.set_level(parsed_args.v)

    try:
        conf_file = ConfigFile(parsed_args.source)
        err_coll = ErrorCollector(conf_file)
        lexer = Lexer(conf_file, err_coll)
        lexer.run()
        """
        for t in lexer.tokens:
            LOGGER.ERROR("T: {} => {}", str(t), t.value)
        err_coll.show_errors()
        """
        if err_coll.has_errors():
            err_coll.show_errors()
    except CompilerException as e:
        LOGGER.ERROR(e)
        return

    main_proxy = Proxy("0.0.0.0", 8081)
    #main_proxy.set_config_file(parsed_args.source)
    main_proxy.run()


if __name__ == '__main__':
    main()
